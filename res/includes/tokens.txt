token PAREN_OPEN (
token PAREN_CLOSE )
token BLOCK_OPEN [
token BLOCK_CLOSE ]
token CURLY_OPEN {
token CURLY_CLOSE }
token QUESTIONMARK ?
token COLON :
token COMMA ,
token SEMICOLON ;

token STRICT_EQ ===
token STRICT_NEQ !==
token EQ ==
token NEQ !=
token ASSIGN =
token NOT !
token SHIFT_LEFT <<
token LTE <=
token LT <
token SHIFT_RIGHT_UNSIGNED >>>
token SHIFT_RIGHT >>
token GTE >=
token GT >
token AND &&
token OR ||
token BINARY_AND &
token BINARY_OR |
token INCREMENT ++
token PREFIX_INCREMENT ++
token INCREMENT_ASSIGN +=
token UNARY_PLUS +
token ADD +
token DECREMENT --
token PREFIX_DECREMENT --
token DECREMENT_ASSIGN -=
token UNARY_NEGATION -
token SUBTRACT -
token MULTIPLY_ASSIGN *=
token EXPONENT **
token MULTIPLY *
token DIVIDE_ASSIGN /=
token DIVIDE /
token DOT .
token MODULO %
token TILDE ~

token IF if
token ELSE else
token WHILE while
token DO do
token FOR for
token FUNCTION function
escaped exact token NEW_ new\s
escaped exact token VAR_ var\s
escaped exact token CONST_ const\s
escaped exact token LET_ let\s
escaped exact token RETURN_ return\s
escaped exact token DELETE_ delete\s
escaped exact token TYPEOF_ typeof\s
escaped exact token VOID_ void\s
escaped exact token AWAIT_ await\s
escaped exact token INSTANCEOF_ instanceof\s
escaped exact token IN_ in\s
escaped exact token OF_ of\s
token NULL null
token UNDEFINED undefined
token NAN NaN

regex IDENTIFIER [a-zA-Z_$][a-zA-Z_0-9$]*

regex STRING_DOUBLEQUOTE "([^\\"]+|\\\\|\\"|\\[^"])*"
regex STRING_SINGLEQUOTE '([^\\']+|\\\\|\\'|\\[^'])*'

regex NUMBER_OCTAL 0x[0-9abcdefABCDEF]+
regex NUMBER_INTEGER [0-9]+
regex NUMBER_FLOAT [0-9]+\.[0-9]+

regex REGEX \/[^ \/]([^\\\/]+|\\\\|\\\/|\\[^\/])*\/[a-zA-Z]*
regex COMMENT_MULTILINE /\/*.*?\*/
regex COMMENT_SINGLELINE //[^\n]*

regex NONCODE (\s+|/\/*.*?\*/|//[^\n]*)+

escaped chars WHITESPACE \n\t\r\s

whitespace WHITESPACE
