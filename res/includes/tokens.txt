token PAREN_OPEN (
token PAREN_CLOSE )
token BLOCK_OPEN [
token BLOCK_CLOSE ]
token CURLY_OPEN {
token CURLY_CLOSE }
token QUESTIONMARK ?
token COLON :
token COMMA ,
token SEMICOLON ;

token STRICT_EQ ===
token STRICT_NEQ !==
token EQ ==
token NEQ !=
token ASSIGN =
token NOT !
token SHIFT_LEFT <<
token LTE <=
token LT <
token SHIFT_RIGHT_UNSIGNED >>>
token SHIFT_RIGHT >>
token GTE >=
token GT >
token AND &&
token OR ||
token BINARY_AND &
token BINARY_OR |
token INCREMENT ++
token INCREMENT_ASSIGN +=
token ADD +
token DECREMENT --
token DECREMENT_ASSIGN -=
token SUBTRACT -
token MULTIPLY_ASSIGN *=
token EXPONENT **
token MULTIPLY *
token DIVIDE_ASSIGN /=
token DIVIDE /
token DOT .
token MODULO %
token TILDE ~

token IF if
token ELSE else
token WHILE while
token DO do
token FOR for
token FUNCTION function
token NEW new
token VAR var
token CONST const
token LET let
token RETURN return
token DELETE delete
token TYPEOF typeof
token INSTANCEOF instanceof
token IN in
token OF of
token NULL null
token UNDEFINED undefined
token NAN NaN

regex IDENTIFIER [a-zA-Z_$][a-zA-Z_0-9$]*

regex STRING_DOUBLEQUOTE "([^\\"]+|\\\\|\\"|\\[^"])*"
regex STRING_SINGLEQUOTE '([^\\']+|\\\\|\\'|\\[^'])*'

regex NUMBER_OCTAL 0x[0-9abcdefABCDEF]+
regex NUMBER_INTEGER [0-9]+
regex NUMBER_FLOAT [0-9]+\.[0-9]+

regex REGEX \/[^ \/]([^\\\/]+|\\\\|\\\/|\\[^\/])*\/[a-zA-Z]*
regex COMMENT_MULTILINE /\/*.*?\*/
regex COMMENT_SINGLELINE //[^\n]*

regex NONCODE (\s+|/\/*.*?\*/|//[^\n]*)+

regex WHITESPACE \s+
regex _ \s*

