operator DOT 19 left
operator INCREMENT 17 nonassoc
operator DECREMENT 17 nonassoc

operator NOT 16 right
operator TILDE 16 right
operator UNARY_PLUS 16 right
operator UNARY_NEGATION 16 right
operator PREFIX_INCREMENT 16 right
operator PREFIX_DECREMENT 16 right
operator TYPEOF 16 right
operator VOID 16 right
operator DELETE 16 right
operator AWAIT 16 right

;
; LValue.
;
LValue -> MemberAccessLValue
    | ComputedMemberAccessLValue
    | VariableAccessLValue

MemberAccessLValue -> ParenExpression DOT IDENTIFIER { reduceMemberAccessExpression($0, $2) }
    | FunctionCallExpression DOT IDENTIFIER { reduceMemberAccessExpression($0, $2) }
    | LValue DOT IDENTIFIER { reduceMemberAccessExpression($0, $2) }
    | ObjectLikeValueExpression DOT IDENTIFIER { reduceMemberAccessExpression($0, $2) }

ComputedMemberAccessLValue -> ParenExpression BLOCK_OPEN Expression BLOCK_CLOSE { reduceComputedMemberAccessExpression($0, $2) }
    | FunctionCallExpression BLOCK_OPEN Expression BLOCK_CLOSE { reduceComputedMemberAccessExpression($0, $2) }
    | LValue BLOCK_OPEN Expression BLOCK_CLOSE { reduceComputedMemberAccessExpression($0, $2) }
    | ObjectLikeValueExpression BLOCK_OPEN Expression BLOCK_CLOSE { reduceComputedMemberAccessExpression($0, $2) }

VariableAccessLValue -> IDENTIFIER { reduceVariableAccessExpression($0) }

;
; Expressions.
;
Expression -> PathExpression
Expression -> ParenExpression

PathExpression -> LValue
    | FunctionCallExpression
    | ParenExpression

ParenExpression -> PAREN_OPEN Expression PAREN_CLOSE { $1 }

Expression -> ValueExpression
ValueExpression -> ObjectLikeValueExpression

;
; New expression.
;
Expression -> NewExpression
NewExpression -> NEW WHITESPACE ParenExpression PAREN_OPEN ArgumentList PAREN_CLOSE { reduceNewExpression($2, $4) }
    | NEW WHITESPACE ParenExpression { reduceNewExpression($2) }
    | NEW WHITESPACE LValue { reduceNewExpression($2) }
    | NEW WHITESPACE FunctionCallExpression { reduceConstructedNewExpression($2) }
    | NEW WHITESPACE NewExpression { reduceNewExpression($2) }

;
; Function call expression.
;
FunctionCallExpression -> LValue PAREN_OPEN ArgumentList PAREN_CLOSE { reduceFunctionCallExpression($0, $2) }
    | LValue PAREN_OPEN PAREN_CLOSE { reduceFunctionCallExpression($0) }

;
; Postfix increment/decrement expression.
;
Expression -> LValue INCREMENT { reducePostfixIncrementExpression($0) }
Expression -> LValue DECREMENT { reducePostfixDecrementExpression($0) }

;
; All of the unary expression operators.
;
;TODO: Change DELETE WHITESPACE Expression -> DELETE WHITESPACE LValue as soon as we rewrite LValue.
Expression -> NOT Expression { reduceNotExpression($1) }
    | TILDE Expression { reduceBitwiseNotExpression($1) }
    | UNARY_PLUS Expression { reduceUnaryPlusExpression($1) }
    | UNARY_NEGATION Expression { reduceUnaryNegationExpression($1) }
    | PREFIX_INCREMENT Expression { reducePrefixIncrementExpression($1) }
    | PREFIX_DECREMENT Expression { reducePrefixDecrementExpression($1) }
    | TYPEOF WHITESPACE Expression { reduceTypeofExpression($2) }
    | VOID WHITESPACE Expression { reduceVoidExpression($2) }
    | DELETE WHITESPACE LValue { reduceDeleteExpression($2) }
    | AWAIT WHITESPACE Expression { reduceAwaitExpression($2) }

;
; Number expressions.
;
ValueExpression -> NumberExpression
NumberExpression -> NUMBER_INTEGER { reduceIntegerNumberExpression }
    | NUMBER_FLOAT { reduceFloatNumberExpression }
    | NUMBER_OCTAL { reduceOctalNumberExpression }

;
; String expressions.
ObjectLikeValueExpression -> StringExpression
StringExpression -> STRING_DOUBLEQUOTE { reduceDoubleQuotedStringExpression($0) }
    | STRING_SINGLEQUOTE { reduceSingleQuotedStringExpression($0) }
