operator DOT 19 left
operator BLOCK_OPEN 19 left
operator PAREN_OPEN 19 left

operator NEW_ 18 right

operator INCREMENT 17 nonassoc
operator DECREMENT 17 nonassoc

operator NOT 16 right
operator TILDE 16 right
operator UNARY_PLUS 16 right
operator UNARY_NEGATION 16 right
operator PREFIX_INCREMENT 16 right
operator PREFIX_DECREMENT 16 right
operator TYPEOF_ 16 right
operator VOID_ 16 right
operator DELETE_ 16 right
operator AWAIT_ 16 right

operator EXPONENT 15 right

operator MULTIPLY 14 left
operator DIVIDE 14 left
operator MODULO 14 left

operator ADD 13 left
operator SUBTRACT 13 left

operator SHIFT_LEFT 12 left
operator SHIFT_RIGHT 12 left
operator SHIFT_RIGHT_UNSIGNED 12 left

operator LT 11 left
operator LTE 11 left
operator GT 11 left
operator GTE 11 left
operator IN_ 11 left
operator INSTANCEOF_ 11 left

operator EQ 10 left
operator NEQ 10 left
operator STRICT_EQ 10 left
operator STRICT_NEQ 10 left

operator BITWISE_AND 9 left
operator BITWISE_XOR 8 left
operator BITWISE_OR 7 left
operator AND 6 left
operator OR 5 left

operator QUESTIONMARK 4 right
operator COLON 4 right

operator ASSIGN 3 right
operator ADD_ASSIGN 3 right
operator SUBTRACT_ASSIGN 3 right
operator EXPONENT_ASSIGN 3 right
operator MULTIPLY_ASSIGN 3 right
operator DIVIDE_ASSIGN 3 right
operator MODULO_ASSIGN 3 right
operator SHIFT_LEFT_ASSIGN 3 right
operator SHIFT_RIGHT_ASSIGN 3 right
operator SHIFT_RIGHT_UNSIGNED_ASSIGN 3 right
operator BITWISE_AND_ASSIGN 3 right
operator BITWISE_XOR_ASSIGN 3 right
operator BITWISE_OR_ASSIGN 3 right

operator YIELD_ 2 right
operator YIELD_STAR_ 2 right

operator COMMA 1 left

;
; Paren expression.
;
Expression -> PAREN_OPEN Expression PAREN_CLOSE { reduceParenExpression($1) }

;
; Member access expression.
;
Expression -> Expression DOT IDENTIFIER { reduceMemberAccessExpression($0, $2) }

;
; Computed member access expression.
;
Expression -> Expression BLOCK_OPEN Expression BLOCK_CLOSE { reduceComputedMemberAccessExpression($0, $2) }

;
; Variable access expression.
;
Expression -> IDENTIFIER { reduceVariableAccessExpression($0) }

;
; New expression.
;
Expression -> NEW_ Expression { reduceNewExpression($1) }

;
; Function call expression.
;
Expression -> Expression PAREN_OPEN ArgumentList PAREN_CLOSE { reduceFunctionCallExpression($0, $2) }
    | Expression PAREN_OPEN PAREN_CLOSE { reduceFunctionCallExpression($0) }

;
; Postfix increment/decrement expression.
;
Expression -> Expression INCREMENT { reducePostfixIncrementExpression($0) }
Expression -> Expression DECREMENT { reducePostfixDecrementExpression($0) }

;
; All of the unary expression operators.
;
Expression -> NOT Expression { reduceNotExpression($1) }
    | TILDE Expression { reduceBitwiseNotExpression($1) }
    | UNARY_PLUS Expression { reduceUnaryPlusExpression($1) }
    | UNARY_NEGATION Expression { reduceUnaryNegationExpression($1) }
    | PREFIX_INCREMENT Expression { reducePrefixIncrementExpression($1) }
    | PREFIX_DECREMENT Expression { reducePrefixDecrementExpression($1) }
    | TYPEOF_ Expression { reduceTypeofExpression($1) }
    | VOID_ Expression { reduceVoidExpression($1) }
    | DELETE_ Expression { reduceDeleteExpression($1) }
    | AWAIT_ Expression { reduceAwaitExpression($1) }
    | YIELD_ Expression { reduceYieldExpression($1) }
    | YIELD_STAR_ Expression { reduceYieldStarExpression($1) }

;
; All of the binary expression operators.
;
Expression -> Expression EXPONENT Expression { reduceExponentExpression($0, $2) }
    | Expression MULTIPLY Expression { reduceMultiplyExpression($0, $2) }
    | Expression DIVIDE Expression { reduceDivideExpression($0, $2) }
    | Expression MODULO Expression { reduceModuloExpression($0, $2) }
    | Expression ADD Expression { reduceAddExpression($0, $2) }
    | Expression SUBTRACT Expression { reduceSubtractExpression($0, $2) }
    | Expression SHIFT_LEFT Expression { reduceBitwiseLeftShiftExpression($0, $2) }
    | Expression SHIFT_RIGHT Expression { reduceBitwiseRightShiftExpression($0, $2) }
    | Expression SHIFT_RIGHT_UNSIGNED Expression { reduceBitwiseUnsignedRightShiftExpression($0, $2) }
    | Expression LT Expression { reduceLessThanExpression($0, $2) }
    | Expression LTE Expression { reduceLessThanOrEqualExpression($0, $2) }
    | Expression GT Expression { reduceGreaterThanExpression($0, $2) }
    | Expression GTE Expression { reduceGreaterThanOrEqualExpression($0, $2) }
    | Expression IN_ Expression { reduceInExpression($0, $2) }
    | Expression INSTANCEOF_ Expression { reduceInstanceofExpression($0, $2) }
    | Expression EQ Expression { reduceEqualityExpression($0, $2) }
    | Expression NEQ Expression { reduceInqualityExpression($0, $2) }
    | Expression STRICT_EQ Expression { reduceStrictEqualityExpression($0, $2) }
    | Expression STRICT_NEQ Expression { reduceStrictInqualityExpression($0, $2) }
    | Expression BITWISE_AND Expression { reduceBitwiseAndExpression($0, $2) }
    | Expression BITWISE_XOR Expression { reduceBitwiseXorExpression($0, $2) }
    | Expression BITWISE_OR Expression { reduceBitwiseOrExpression($0, $2) }
    | Expression AND Expression { reduceLogicalAndExpression($0, $2) }
    | Expression OR Expression { reduceLogicalOrExpression($0, $2) }
    | Expression ASSIGN Expression { reduceAssignmentExpression($0, $2) }
    | Expression ADD_ASSIGN Expression { reduceAddAssignmentExpression($0, $2) }
    | Expression SUBTRACT_ASSIGN Expression { reduceSubtractAssignmentExpression($0, $2) }
    | Expression EXPONENT_ASSIGN Expression { reduceExponentAssignmentExpression($0, $2) }
    | Expression MULTIPLY_ASSIGN Expression { reduceMultiplyAssignmentExpression($0, $2) }
    | Expression DIVIDE_ASSIGN Expression { reduceDivideAssignmentExpression($0, $2) }
    | Expression MODULO_ASSIGN Expression { reduceModuloAssignmentExpression($0, $2) }
    | Expression SHIFT_LEFT_ASSIGN Expression { reduceBitwiseLeftShiftAssignmentExpression($0, $2) }
    | Expression SHIFT_RIGHT_ASSIGN Expression { reduceBitwiseRightShiftAssignmentExpression($0, $2) }
    | Expression SHIFT_RIGHT_UNSIGNED_ASSIGN Expression { reduceBitwiseUnsignedRightShiftAssignmentExpression($0, $2) }
    | Expression BITWISE_AND_ASSIGN Expression { reduceBitwiseAndAssignmentExpression($0, $2) }
    | Expression BITWISE_XOR_ASSIGN Expression { reduceBitwiseXorAssignmentExpression($0, $2) }
    | Expression BITWISE_OR_ASSIGN Expression { reduceBitwiseOrAssignmentExpression($0, $2) }

;
; The one ternary expression.
;
Expression -> Expression QUESTIONMARK Expression COLON Expression { reduceConditionalExpression($0, $2, $4) }

;
; Number expressions.
;
Expression -> NUMBER_INTEGER { reduceIntegerNumberExpression }
    | NUMBER_FLOAT { reduceFloatNumberExpression }
    | NUMBER_OCTAL { reduceOctalNumberExpression }

;
; Function expressions.
;
Expression -> FUNCTION_ IDENTIFIER WrappedParameterList CodeBlock { reduceNamedFunctionExpression($1, $2, $3) }
    | FUNCTION_ WrappedParameterList CodeBlock { reduceAnonymousFunctionExpression($1, $2) }
    | FUNCTION WrappedParameterList CodeBlock { reduceAnonymousFunctionExpression($1, $2) }

;
; String expressions.
;
Expression -> STRING_DOUBLEQUOTE { reduceDoubleQuotedStringExpression($0) }
    | STRING_SINGLEQUOTE { reduceSingleQuotedStringExpression($0) }

;
; Array expressions.
;
Expression -> BLOCK_OPEN ArrayItems BLOCK_CLOSE { reduceArray($1) }
Expression -> BLOCK_OPEN BLOCK_CLOSE { reduceArray($0) }
Expression -> BLOCK_OPEN ArrayItems COMMA BLOCK_CLOSE { reduceArray($1) }
ArrayItems -> ArrayItems COMMA Expression { arrayPush($0, $2) }
    | Expression { arrayOf($0) }

;
; Value constants.
;
Expression -> NULL { reduceConstantExpression($0) }
    | UNDEFINED { reduceConstantExpression($0) }
    | NAN { reduceConstantExpression($0) }
    | TRUE { reduceConstantExpression($0) }
    | FALSE { reduceConstantExpression($0) }
