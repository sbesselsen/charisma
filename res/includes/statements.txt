operator ELSE 20 left

;
; Expression statements.
;
Statement -> Expression SEMICOLON { reduceExpressionStatement($0) }

;
; Function statements.
;
Statement -> PRIO_FUNCTION_ IDENTIFIER WrappedParameterList CodeBlock { reduceFunctionDeclarationStatement($1, $2, $3) }

;
; If statements.
;
Statement -> IF PAREN_OPEN Expression PAREN_CLOSE CodeBlock { reduceIfStatement($2, $4) }
    | IF PAREN_OPEN Expression PAREN_CLOSE CodeBlock ELSE CodeBlock { reduceIfStatement($2, $4, $6) }

;
; While statements.
;
Statement -> WHILE PAREN_OPEN Expression PAREN_CLOSE CodeBlock { reduceWhileStatement($2, $4) }
Statement -> DO CodeBlock WHILE PAREN_OPEN Expression PAREN_CLOSE { reduceDoWhileStatement($4, $2) }

;
; For statements.
;
Statement -> FOR PAREN_OPEN ForPreStatement SEMICOLON Expression SEMICOLON Expression PAREN_CLOSE CodeBlock { reduceForStatement($2, $4, $6, $8) }
    | FOR PAREN_OPEN SEMICOLON Expression SEMICOLON Expression PAREN_CLOSE CodeBlock { reduceForStatement($2, $3, $5, $7) }
    | FOR PAREN_OPEN ForPreStatement SEMICOLON Expression SEMICOLON PAREN_CLOSE CodeBlock { reduceForStatement($2, $4, $5, $7) }
    | FOR PAREN_OPEN SEMICOLON Expression SEMICOLON PAREN_CLOSE CodeBlock { reduceForStatement($2, $3, $4, $6) }

ForPreStatement -> Expression { reduceExpressionStatement($0) }
;    | VarDeclareStatement  TODO

;
; Switch/case statements.
;
Statement -> SWITCH PAREN_OPEN Expression PAREN_CLOSE CURLY_OPEN SwitchCaseItems CURLY_CLOSE { reduceSwitchStatement($2, $5) }
Statement -> SWITCH PAREN_OPEN Expression PAREN_CLOSE CURLY_OPEN NONCODE SwitchCaseItems CURLY_CLOSE { reduceSwitchStatement($2, $6) }
Statement -> SWITCH PAREN_OPEN Expression PAREN_CLOSE CURLY_OPEN CURLY_CLOSE { reduceSwitchStatement($2) }

SwitchCaseItems -> SwitchCaseItems SwitchCaseItem { arrayPush($0, $1) }
    | SwitchCaseItem { arrayOf($0) }

SwitchCaseItem -> CASE_ Expression COLON CodeBlockItems { reduceSwitchCase($1, $3) }
    | CASE_ Expression COLON { reduceSwitchCase($1) }
    | DEFAULT COLON { reduceSwitchDefault($0) }
    | DEFAULT COLON CodeBlockItems { reduceSwitchDefault($0, $2) }

;
; Return statements.
;
Statement -> RETURN_ Expression SEMICOLON { reduceReturnStatement($0, $1) }
    | RETURN_ SEMICOLON { reduceReturnStatement($0) }
    | RETURN SEMICOLON { reduceReturnStatement($0) }

;
; Break statements.
;
Statement -> BREAK_ IDENTIFIER SEMICOLON { reduceBreakStatement($0, $1) }
    | BREAK_ SEMICOLON { reduceBreakStatement($0) }
    | BREAK SEMICOLON { reduceBreakStatement($0) }

;
; Continue statements.
;
Statement -> CONTINUE_ IDENTIFIER SEMICOLON { reduceContinueStatement($0, $1) }
    | CONTINUE_ SEMICOLON { reduceContinueStatement($0) }
    | CONTINUE SEMICOLON { reduceContinueStatement($0) }

;
; Labeled statements.
;
Statement -> LABEL Statement { reduceLabeledStatement($0, $1) }
